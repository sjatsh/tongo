package tlb

import (
	"fmt"
	"github.com/sjatsh/tongo/boc"
	"testing"
)

func TestTuple(t *testing.T) {
	decoded := []string{
		"d53ac32cecdaa647c4393b0ae88d8809563527220ebec291189122dd8df6ae0c 96837bde679",
		"bfc07ec955b0ddef78205a39307bfa9d4ae2fdea93a664bd68d4c7b7ffb574c0 11f1d728980d",
		"943647c2ef963ba0e971a5fa6195b915e01eec055b567c4d51f24cc4c7944e65 a00e77ce600",
		"8e94933a6699f7cc3e64554bbd6ea361354972a5ad1b39cade67fe92812c4cc8 9db41ec0957",
		"7c6b6514926a7f7a2d5d569de58e8a99d22eb365c79bf2f8fc7dac6b2a861c15 14867828fa22d",
		"501feec15aa67776e86c2f38e3a49c7eddf889893d30991c374ce3036d01a273 a64602ace1f",
		"4bc0b06170e0d50004dd3e28526cd473028d37eb8f54251f41a1a22b8084aa6b 14ac8c2cb2ed0",
		"20b02b9f3bac38ed9a6a841ac4137edd2a4a07a372b33dc2a9e2f5bc59c44ce5 1c0258648009",
		"1247485e59832abc8b591bd520f22b438fda946f4d3ec8f39bbdbb01bb32b345 957bc4a5321",
		"0870cefc6990909d2a70cd7ecb5d4f457e334fa04ab22150c458633ba4a2fd05 968b30ae452",
		"02fd01da5e49b666720d5f918837e97cbb15a6f866c2cc7c1e62f29c4514b073 cabfd31bff7",
	}
	cells, err := boc.DeserializeBocBase64("te6ccgECRQEAAwsAAwwAAAEHAAIBAgMAAAIGBwAEBEICBgcAAggJAgAFQgIABgcARAIA1TrDLOzapkfEOTsK6I2ICVY1JyIOvsKRGJEi3Y32rgwAEgEAAAloN73meQIGBwAECkICBgcAAg4PAgALQgIADA0ARAIAv8B+yVWw3e94IFo5MHv6nUri/eqTpmS9aNTHt/+1dMAAEgEAABHx1yiYDQIGBwAEEEICBgcAAhQVAgARQgIAEhMARAIAlDZHwu+WO6DpcaX6YZW5FeAe7AVbVnxNUfJMxMeUTmUAEgEAAAoA53zmAAIGBwAEFkICBgcAAhobAgAXQgIAGBkARAIAjpSTOmaZ98w+ZFVLvW6jYTVJcqWtGznK3mf+koEsTMgAEgEAAAnbQewJVwIGBwAEHEICBgcAAiAhAgAdQgIAHh8ARAIAfGtlFJJqf3otXVad5Y6KmdIus2XHm/L4/H2sayqGHBUAEgEAAUhngo+iLQIGBwAEIkICBgcAAiYnAgAjQgIAJCUARAIAUB/uwVqmd3bobC8446Scft34iYk9MJkcN0zjA20BonMAEgEAAApkYCrOHwIGBwAEKEICBgcAAiwtAgApQgIAKisARAIAS8CwYXDg1QAE3T4oUmzUcwKNN+uPVCUfQaGiK4CEqmsAEgEAAUrIwssu0AIGBwAELkICBgcAAjIzAgAvQgIAMDEARAIAILArnzusOO2aaoQaxBN+3SpKB6Nysz3CqeL1vFnETOUAEgEAABwCWGSACQIGBwAENEICBgcAAjg5AgA1QgIANjcARAIAEkdIXlmDKryLWRvVIPIrQ4/alG9NPsjzm727Absys0UAEgEAAAlXvEpTIQIGBwAEOkICBgcAAj4/AgA7QgIAPD0ARAIACHDO/GmQkJ0qcM1+y11PRX4zT6BKsiFQxFhjO6Si/QUAEgEAAAloswrkUgIGBwAEQEIAAgACAEFCAgBDRAASAQAAAAAAAAAAAEQCAAL9AdpeSbZmcg1fkYg36Xy7Fab4ZsLMfB5i8pxFFLBzABIBAAAMq/0xv/c=")
	if err != nil {
		t.Fatal(err)
	}
	var stack VmStack
	err = Unmarshal(cells[0], &stack)
	if err != nil {
		t.Fatal(err)
	}
	var items []struct {
		Address       Bits256
		Amount        Grams
		PendingAmount Grams
		Requested     bool
	}
	err = stack[0].VmStkTuple.Unmarshal(&items)
	if err != nil {
		panic(err)
	}
	if len(items) != 11 {
		t.Fatal("invalid length")
	}
	for i, v := range items {
		if fmt.Sprintf("%x %x", v.Address, v.Amount) != decoded[i] {
			t.Errorf("mismatch %v", i)
		}
	}
}

func TestTuple2(t *testing.T) {
	decoded := []string{
		"0:ffeb445c8ad504f9ffb32705307d90891b5e0f3d468720171d133fa9362ab6ad",
		"0:f1f1ab412071d99c129e242476eac5e217a1dd273e1d250f715e21367d7e5bbc",
		"0:ee5fe1a2f231e272532079959c4b3ce8c9c7673d329bf1e4c969419068731dba",
		"0:daa65812e3782d76a678874e08a26b766d3ce2a91c61a996c735c3b6040cade3",
		"0:d5337848f19b3241c8bf8ae3a71bc23bb6b1b2d888fd9db058cc4d135e43b438",
		"0:ca30422277d36d919a8009f1d7e5db8cb753da61abe1497a1fa156e94034f6b8",
		"0:bfc3d4a12bf2c583116f1b633e01797d9c0fc93055e1ea34bcf0369e5b1df119",
		"0:b1622430c3b3e078862f12a77af514e4b97fd03c8291fc66e2087ba540272987",
		"0:a839b79c0d810943e342e7b9f9610837431699b4c4b1d94a11b615f9ed553924",
		"0:a7f16ab527f8044e7d59f0cc055f517eefbdaf0ac0698f1f9540b13acc703ee2",
		"0:938d4862ee5541d1317b7cfb10cbc1ef33d2346816e51480456107381bca82a5",
		"0:89ccfe247b44f1415c7e17b39f1081e25da37eae3c77fb02024ed60829628ff0",
		"0:854eca6a78019721a6cdf9d93550af1e1d959a59f858e27802103c48131bdcd7",
		"0:7730e5b4ce4711b27d130a0f99e6c11671ed29877543c99777cbdef3bb23fa33",
		"0:6fcddd775c9ab9f9c352ae6c71de1d6e8d5c02458b87df277cd5fc7bf1c5a32e",
		"0:4cb99b77e4c48b7553fb486d18493aace786285e0fec6100ef57658080caa0bd",
		"0:380d13d31965f76ff41d93c323283adfb2696d6a04a0f38ce5d63ee0550a8597",
		"0:25d2da1a46b65aee4f10efa74a34e73a35f49aa4cbc55236b06466bc8a44f28c",
		"0:229295e13d6c53e535d94a845390394f7c6f92ca1eac31c0a7b92f032c958c31",
		"0:1d655a2cf9104791dc76fee53481248b4ed05e9779486607434e8a481da46eef",
		"0:1c8adcae3b4b05092c3d0e1d2379aa970bf7f455f4b95652ff57159e55295578",
		"0:110f261356ad66b69d7a93b69d9a1955cdfa66bbc13b4da7f563487b58dc44e0",
	}
	cells, err := boc.DeserializeBocBase64("te6ccgECRQEABGAAAwwAAAEHAAIBAgMAAAIGBwACQwQCBgcAAgUGAEQCAP/rRFyK1QT5/7MnBTB9kIkbXg89RocgFx0TP6k2KratAgYHAAJDBwIGBwACCAkARAIA8fGrQSBx2ZwSniQkdurF4heh3Sc+HSUPcV4hNn1+W7wCBgcAAkMKAgYHAAILDABEAgDuX+Gi8jHiclMgeZWcSzzoycdnPTKb8eTJaUGQaHMdugIGBwACQw0CBgcAAg4PAEQCANqmWBLjeC12pniHTgiia3ZtPOKpHGGplsc1w7YEDK3jAgYHAAJDEAIGBwACERIARAIA1TN4SPGbMkHIv4rjpxvCO7axstiI/Z2wWMxNE15DtDgCBgcAAkMTAgYHAAIUFQBEAgDKMEIid9NtkZqACfHX5duMt1PaYavhSXofoVbpQDT2uAIGBwACQxYCBgcAAhcYAEQCAL/D1KEr8sWDEW8bYz4BeX2cD8kwVeHqNLzwNp5bHfEZAgYHAAJDGQIGBwACGhsARAIAsWIkMMOz4HiGLxKnevUU5Ll/0DyCkfxm4gh7pUAnKYcCBgcAAkMcAgYHAAIdHgBEAgCoObecDYEJQ+NC57n5YQg3QxaZtMSx2UoRthX57VU5JAIGBwACQx8CBgcAAiAhAEQCAKfxarUn+AROfVnwzAVfUX7vva8KwGmPH5VAsTrMcD7iAgYHAAJDIgIGBwACIyQARAIAk41IYu5VQdExe3z7EMvB7zPSNGgW5RSARWEHOBvKgqUCBgcAAkMlAgYHAAImJwBEAgCJzP4ke0TxQVx+F7OfEIHiXaN+rjx3+wICTtYIKWKP8AIGBwACQygCBgcAAikqAEQCAIVOymp4AZchps352TVQrx4dlZpZ+FjieAIQPEgTG9zXAgYHAAJDKwIGBwACLC0ARAIAdzDltM5HEbJ9EwoPmebBFnHtKYd1Q8mXd8ve87sj+jMCBgcAAkMuAgYHAAIvMABEAgBvzd13XJq5+cNSrmxx3h1ujVwCRYuH3yd81fx78cWjLgIGBwACQzECBgcAAjIzAEQCAEy5m3fkxIt1U/tIbRhJOqznhiheD+xhAO9XZYCAyqC9AgYHAAJDNAIGBwACNTYARAIAOA0T0xll92/0HZPDIyg637JpbWoEoPOM5dY+4FUKhZcCBgcAAkM3AgYHAAI4OQBEAgAl0toaRrZa7k8Q76dKNOc6NfSapMvFUjawZGa8ikTyjAIGBwACQzoCBgcAAjs8AEQCACKSleE9bFPlNdlKhFOQOU98b5LKHqwxwKe5LwMslYwxAgYHAAJDPQIGBwACPj8ARAIAHWVaLPkQR5Hcdv7lNIEki07QXpd5SGYHQ06KSB2kbu8CBgcAAkNAAgYHAAJBQgBEAgAcityuO0sFCSw9Dh0jeaqXC/f0VfS5VlL/VxWeVSlVeAIGBwACQ0QAAgAAEgEAAAAAAAAAAABEAgARDyYTVq1mtp16k7admhlVzfpmu8E7Taf1Y0h7WNxE4A==")
	if err != nil {
		t.Fatal(err)
	}
	var stack VmStack
	err = Unmarshal(cells[0], &stack)
	if err != nil {
		t.Fatal(err)
	}
	var plugins []struct {
		Workchain int32
		Address   Bits256
	}
	err = stack[0].VmStkTuple.Unmarshal(&plugins)
	if err != nil {
		t.Fatal(err)
	}
	if len(plugins) != len(decoded) {
		t.Fatal(len(plugins))
	}
	for i, p := range plugins {
		if fmt.Sprintf("%v:%x", p.Workchain, p.Address) != decoded[i] {
			t.Fatal(i)
		}
	}
}
