package abi

// Code autogenerated. DO NOT EDIT.

import (
	"github.com/sjatsh/tongo/boc"
	"github.com/sjatsh/tongo/tlb"
)

func decodeTextCommentJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res TextCommentJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = TextCommentJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeTegroJettonSwapJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res TegroJettonSwapJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = TegroJettonSwapJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeEncryptedTextCommentJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res EncryptedTextCommentJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = EncryptedTextCommentJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeStonfiSwapJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res StonfiSwapJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = StonfiSwapJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeTegroAddLiquidityJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res TegroAddLiquidityJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = TegroAddLiquidityJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeStonfiSwapOkRefJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res StonfiSwapOkRefJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil && completedRead(c) {
		j.SumType = StonfiSwapOkRefJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeTonkeeperRelayerFeeJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res TonkeeperRelayerFeeJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = TonkeeperRelayerFeeJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeStonfiSwapOkJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res StonfiSwapOkJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil && completedRead(c) {
		j.SumType = StonfiSwapOkJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeDedustSwapJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res DedustSwapJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = DedustSwapJettonOp
		j.Value = res
		return nil
	}
	return err
}

func decodeStonfiProvideLiquidityJettonOpJetton(j *JettonPayload, c *boc.Cell) error {
	var res StonfiProvideLiquidityJettonPayload
	err := tlb.Unmarshal(c, &res)
	if err == nil {
		j.SumType = StonfiProvideLiquidityJettonOp
		j.Value = res
		return nil
	}
	return err
}

const (
	TextCommentJettonOp            JettonOpName = "TextComment"
	TegroJettonSwapJettonOp        JettonOpName = "TegroJettonSwap"
	EncryptedTextCommentJettonOp   JettonOpName = "EncryptedTextComment"
	StonfiSwapJettonOp             JettonOpName = "StonfiSwap"
	TegroAddLiquidityJettonOp      JettonOpName = "TegroAddLiquidity"
	StonfiSwapOkRefJettonOp        JettonOpName = "StonfiSwapOkRef"
	TonkeeperRelayerFeeJettonOp    JettonOpName = "TonkeeperRelayerFee"
	StonfiSwapOkJettonOp           JettonOpName = "StonfiSwapOk"
	DedustSwapJettonOp             JettonOpName = "DedustSwap"
	StonfiProvideLiquidityJettonOp JettonOpName = "StonfiProvideLiquidity"

	TextCommentJettonOpCode            JettonOpCode = 0x00000000
	TegroJettonSwapJettonOpCode        JettonOpCode = 0x01fb7a25
	EncryptedTextCommentJettonOpCode   JettonOpCode = 0x2167da4b
	StonfiSwapJettonOpCode             JettonOpCode = 0x25938561
	TegroAddLiquidityJettonOpCode      JettonOpCode = 0x287e167a
	StonfiSwapOkRefJettonOpCode        JettonOpCode = 0x45078540
	TonkeeperRelayerFeeJettonOpCode    JettonOpCode = 0x878da6e3
	StonfiSwapOkJettonOpCode           JettonOpCode = 0xc64370e5
	DedustSwapJettonOpCode             JettonOpCode = 0xe3a0d482
	StonfiProvideLiquidityJettonOpCode JettonOpCode = 0xfcf9e58f
)

var KnownJettonTypes = map[string]any{
	TextCommentJettonOp:            TextCommentJettonPayload{},
	TegroJettonSwapJettonOp:        TegroJettonSwapJettonPayload{},
	EncryptedTextCommentJettonOp:   EncryptedTextCommentJettonPayload{},
	StonfiSwapJettonOp:             StonfiSwapJettonPayload{},
	TegroAddLiquidityJettonOp:      TegroAddLiquidityJettonPayload{},
	StonfiSwapOkRefJettonOp:        StonfiSwapOkRefJettonPayload{},
	TonkeeperRelayerFeeJettonOp:    TonkeeperRelayerFeeJettonPayload{},
	StonfiSwapOkJettonOp:           StonfiSwapOkJettonPayload{},
	DedustSwapJettonOp:             DedustSwapJettonPayload{},
	StonfiProvideLiquidityJettonOp: StonfiProvideLiquidityJettonPayload{},
}
var JettonOpCodes = map[JettonOpName]JettonOpCode{
	TextCommentJettonOp:            TextCommentJettonOpCode,
	TegroJettonSwapJettonOp:        TegroJettonSwapJettonOpCode,
	EncryptedTextCommentJettonOp:   EncryptedTextCommentJettonOpCode,
	StonfiSwapJettonOp:             StonfiSwapJettonOpCode,
	TegroAddLiquidityJettonOp:      TegroAddLiquidityJettonOpCode,
	StonfiSwapOkRefJettonOp:        StonfiSwapOkRefJettonOpCode,
	TonkeeperRelayerFeeJettonOp:    TonkeeperRelayerFeeJettonOpCode,
	StonfiSwapOkJettonOp:           StonfiSwapOkJettonOpCode,
	DedustSwapJettonOp:             DedustSwapJettonOpCode,
	StonfiProvideLiquidityJettonOp: StonfiProvideLiquidityJettonOpCode,
}

var funcJettonDecodersMapping = map[JettonOpCode]func(*JettonPayload, *boc.Cell) error{
	TextCommentJettonOpCode:            decodeTextCommentJettonOpJetton,
	TegroJettonSwapJettonOpCode:        decodeTegroJettonSwapJettonOpJetton,
	EncryptedTextCommentJettonOpCode:   decodeEncryptedTextCommentJettonOpJetton,
	StonfiSwapJettonOpCode:             decodeStonfiSwapJettonOpJetton,
	TegroAddLiquidityJettonOpCode:      decodeTegroAddLiquidityJettonOpJetton,
	StonfiSwapOkRefJettonOpCode:        decodeStonfiSwapOkRefJettonOpJetton,
	TonkeeperRelayerFeeJettonOpCode:    decodeTonkeeperRelayerFeeJettonOpJetton,
	StonfiSwapOkJettonOpCode:           decodeStonfiSwapOkJettonOpJetton,
	DedustSwapJettonOpCode:             decodeDedustSwapJettonOpJetton,
	StonfiProvideLiquidityJettonOpCode: decodeStonfiProvideLiquidityJettonOpJetton,
}

type TextCommentJettonPayload struct {
	Text tlb.Text
}

type TegroJettonSwapJettonPayload struct {
	Extract          bool
	MaxIn            tlb.VarUInteger16
	MinOut           tlb.VarUInteger16
	Destination      tlb.MsgAddress
	ErrorDestination tlb.MsgAddress
	Payload          *tlb.Any `tlb:"maybe^"`
}

type EncryptedTextCommentJettonPayload struct {
	CipherText tlb.Bytes
}

type StonfiSwapJettonPayload struct {
	TokenWallet     tlb.MsgAddress
	MinOut          tlb.VarUInteger16
	ToAddress       tlb.MsgAddress
	ReferralAddress *tlb.MsgAddress `tlb:"maybe"`
}

type TegroAddLiquidityJettonPayload struct {
	AmountA tlb.VarUInteger16
	AbountB tlb.VarUInteger16
}

type StonfiSwapOkRefJettonPayload struct{}

type TonkeeperRelayerFeeJettonPayload struct{}

type StonfiSwapOkJettonPayload struct{}

type DedustSwapJettonPayload struct {
	Step       DedustSwapStep
	SwapParams DedustSwapParams `tlb:"^"`
}

type StonfiProvideLiquidityJettonPayload struct {
	TokenWallet tlb.MsgAddress
	MinLpOut    tlb.VarUInteger16
}
